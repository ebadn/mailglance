{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ebadn\\\\OneDrive\\\\Desktop\\\\Ebad\\\\Mini Project\\\\mailglance\\\\frontend\\\\src\\\\pages\\\\Emails.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport EmailCard from \"../components/EmailCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Emails = () => {\n  _s();\n  const [emails, setEmails] = useState([]);\n  useEffect(() => {\n    fetch(\"http://localhost:5000/api/emails\") // Your Flask backend route\n    .then(res => res.json()).then(data => setEmails(data)).catch(err => console.error(\"Failed to fetch emails\", err));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-2xl font-bold mb-4\",\n      children: \"\\uD83D\\uDCE5 Your Summarized Emails\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this), emails.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No emails to show yet. Try refreshing.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }, this) : emails.map((email, index) => /*#__PURE__*/_jsxDEV(EmailCard, {\n      subject: email.subject,\n      from: email.from,\n      summary: email.summary,\n      messageId: email.id || \"\" // Optional: You can include actual Gmail ID later\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 11\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n};\n_s(Emails, \"Pz1emXvf1o2teMcG4tW42BuWti4=\");\n_c = Emails;\nexport default Emails;\nvar _c;\n$RefreshReg$(_c, \"Emails\");","map":{"version":3,"names":["React","useEffect","useState","EmailCard","jsxDEV","_jsxDEV","Emails","_s","emails","setEmails","fetch","then","res","json","data","catch","err","console","error","children","className","fileName","_jsxFileName","lineNumber","columnNumber","length","map","email","index","subject","from","summary","messageId","id","_c","$RefreshReg$"],"sources":["C:/Users/ebadn/OneDrive/Desktop/Ebad/Mini Project/mailglance/frontend/src/pages/Emails.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport EmailCard from \"../components/EmailCard\";\r\n\r\nconst Emails = () => {\r\n  const [emails, setEmails] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetch(\"http://localhost:5000/api/emails\")  // Your Flask backend route\r\n      .then((res) => res.json())\r\n      .then((data) => setEmails(data))\r\n      .catch((err) => console.error(\"Failed to fetch emails\", err));\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h1 className=\"text-2xl font-bold mb-4\">ðŸ“¥ Your Summarized Emails</h1>\r\n      {emails.length === 0 ? (\r\n        <p>No emails to show yet. Try refreshing.</p>\r\n      ) : (\r\n        emails.map((email, index) => (\r\n          <EmailCard\r\n            key={index}\r\n            subject={email.subject}\r\n            from={email.from}\r\n            summary={email.summary}\r\n            messageId={email.id || \"\"}  // Optional: You can include actual Gmail ID later\r\n          />\r\n        ))\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Emails;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,SAAS,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhD,MAAMC,MAAM,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAExCD,SAAS,CAAC,MAAM;IACdS,KAAK,CAAC,kCAAkC,CAAC,CAAE;IAAA,CACxCC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACzBF,IAAI,CAAEG,IAAI,IAAKL,SAAS,CAACK,IAAI,CAAC,CAAC,CAC/BC,KAAK,CAAEC,GAAG,IAAKC,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAEF,GAAG,CAAC,CAAC;EACjE,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEX,OAAA;IAAAc,QAAA,gBACEd,OAAA;MAAIe,SAAS,EAAC,yBAAyB;MAAAD,QAAA,EAAC;IAAyB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACrEhB,MAAM,CAACiB,MAAM,KAAK,CAAC,gBAClBpB,OAAA;MAAAc,QAAA,EAAG;IAAsC;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,GAE7ChB,MAAM,CAACkB,GAAG,CAAC,CAACC,KAAK,EAAEC,KAAK,kBACtBvB,OAAA,CAACF,SAAS;MAER0B,OAAO,EAAEF,KAAK,CAACE,OAAQ;MACvBC,IAAI,EAAEH,KAAK,CAACG,IAAK;MACjBC,OAAO,EAAEJ,KAAK,CAACI,OAAQ;MACvBC,SAAS,EAAEL,KAAK,CAACM,EAAE,IAAI,EAAG,CAAE;IAAA,GAJvBL,KAAK;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAKX,CACF,CACF;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACjB,EAAA,CA5BID,MAAM;AAAA4B,EAAA,GAAN5B,MAAM;AA8BZ,eAAeA,MAAM;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}